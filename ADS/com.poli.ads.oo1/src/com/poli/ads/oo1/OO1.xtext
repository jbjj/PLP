/*
 * Projeto ADS 2017.2
 * POLI-UPE
 * 
 *   - Linguagem Orientada a Objeto 1
 * 
 * Pitï¿½goras Borges
 */

grammar com.poli.ads.oo1.OO1 with org.eclipse.xtext.common.Terminals

generate oO1 "http://www.poli.com/ads/oo1/OO1"

//---------------------------------------------------------------------------

Programa : "{" dec=DecClasse ";" cmd=Skip "}";

Comando: => cmd=(
		ExpCommand
		| ComDeclaracao
		| While
		| IfThenElse
		| IO
	) cmdComp=ComandoComposto?;
	
ExpCommand: => LeftCommand | ChamadaMetodo;
	
Skip: {Skip} skip=Comando?;

ComandoComposto: ";" cmd=Skip;

ComDeclaracao : "{" dec=DecVariavel ";" cmd=Skip "}";

While: "while" cond=Expressao "do" do=Skip;
	
IfThenElse: "if" cond=Expressao "then" then=Skip ("else" else=Skip)?;

ChamadaMetodo : exp=Expressao "." ID "(" exps=ListaExpressao? ")";

ListaExpressao			: exp=Expressao comp=ListaExpressaoComposta?;
ListaExpressaoComposta	: "," expComp=ListaExpressao; 

LeftCommand	: leftExp=LeftExpression ":=" cmd=(New | Atribuicao);
New			: {New} "new" val=ID;
Atribuicao 	: {Atribuicao} exp=Expressao;

LeftExpression : 
		 {ExpId} name=ID acesso=AcessoAtributo?
		|{ExpThis} name=VALOR_THIS acesso=AcessoAtributo;

AcessoAtributo: {AcessoAtributo} "."attr=ID acessoComp=AcessoComposto?;
AcessoComposto: acesso=AcessoAtributo;

IO : 
	 {IOWrite} "write" "(" exp=Expressao ")" 
	|{IORead} "read" "(" ID ")";

Expressao: => exp=(
		Valor
		| ExpUnaria
		| LeftExpression
	) bin=ExpBinaria?;

DecClasse : 
	"classe" name=ID "{" decVar=DecVariavel ";" decProc=DecProcedimento "}" decClasseComposta=DeclaracaoClasseComposta;

DeclaracaoClasseComposta: "," decl=DecClasse;

DecVariavel: Tipo name=ID (
		 "=" exp=Expressao
		|":=" "new" ID
		) decComposta=DeclaracaoComposta?;

DeclaracaoComposta: "," decl=DecVariavel;

DecProcedimento: "proc" name=ID "(" decLista=ListaDeclaracaoParametro ")""{" cmd=Skip "}";

ListaDeclaracaoParametro: Tipo name=ID comp=ListaDeclaracaoComposta?;

ListaDeclaracaoComposta: "," decLista=ListaDeclaracaoParametro;

ExpUnaria: 
	  {ExpNeg}	"-" exp=Expressao 
	| {ExpNot}  "not" exp=Expressao 
	| {ExpLen}	"length" exp=Expressao;

ExpBinaria: 
	  {ExpSoma}	"+" exp=Expressao
	| {ExpSub}	"-" exp=Expressao
	| {ExpAnd}	"and" exp=Expressao
	| {ExpOr}	"or" exp=Expressao
	| {ExpEq}	"==" exp=Expressao
	| {ExpInc}	"++" exp=Expressao;

Valor			: {Valor} val=ValorConcreto;
ValorConcreto	: VALOR_INTEIRO | VALOR_BOOLEANO | VALOR_STRING | VALOR_NULL | VALOR_THIS;
Tipo				: ID | TIPO_PRIMITIVO;

//---------------------------------------------------------------------------------------------
	
terminal TIPO_PRIMITIVO	: "string" | "int" | "boolean";
terminal VALOR_INTEIRO	: INT ;
terminal VALOR_BOOLEANO	: "true" | "false" ;
terminal VALOR_STRING	: STRING ;
terminal VALOR_NULL		: "null" ;
terminal VALOR_THIS		: "this" ;
